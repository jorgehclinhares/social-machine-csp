include "locationServer.csp"

channel serviceOn: Bool
channel databaseOn: Bool
channel relationships: { 0..1 }.SM_CONSTRAINTS
channel sm_response: SM_RESPONSE_TYPES
channel sm_accessKeys: { 0..2 }
channel databaseRelationship: { 0..2 }
channel sm_operation: { 0, 1 }
channel sm_registerToServerLocation
channel sm_findInServerLocation
channel sm_relationship
channel sm_log

-- DATATYPES
datatype SM_CONSTRAINTS = accessData | countAccess 
datatype SM_RESPONSE_TYPES = RelationInfo | RelationNotFound | constraintNotFound | InvalidAction

-- CONSTANTS
PROVIDER_RELATIONSHIPS = { 0..10 }
PROVIDER_CONSTRAINTS = SM_CONSTRAINTS

Init = SM1 [|{sm_registerToServerLocation, sm_relationship}|] SM2
SM1 = (SocialMachineMain(1, {}))
SM2 = (SocialMachineMain(2, {}))

SocialMachineMain(accessKey, smsKey) = (
	sm_registerToServerLocation -> LocationServerMain(0, accessKey, smsKey)
	[] sm_findInServerLocation -> LocationServerMain(1, accessKey, smsKey)
	[] if (empty(smsKey)) then(
			sm_response!InvalidAction -> SocialMachineMain(accessKey, smsKey)
		) else(
			sm_relationship -> relationships?idRel.idConst -> validRelation(accessKey, smsKey, idRel, idConst)
		)
)

validRelation(accessKey, smsKey, idRel, idConst) = (
	if ( member(idRel, PROVIDER_RELATIONSHIPS) ) then ( 
		validConstraints(accessKey, smsKey, idConst) 
	) else (
		sm_response!RelationNotFound -> SocialMachineMain(accessKey, smsKey)
	)
)

validConstraints(accessKey, smsKey, idConst) = (
	if ( member(idConst, PROVIDER_CONSTRAINTS) ) then (
		sm_response!RelationInfo -> SocialMachineMain(accessKey, smsKey)
	) else (
		sm_response!RelationNotFound -> SocialMachineMain(accessKey, smsKey)
	)
)

-- ASSERTS
assert SM1 :[deadlock-free]
assert SM1 :[deterministic]
assert SM1 :[divergence-free]