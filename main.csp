include "locationServer.csp"

-- CHANNELS
channel relationships: SM_RELATIONSHIP.SM_CONSTRAINTS
channel sm_response: SM_RESPONSE_TYPES
channel sm_operation: SM_OPERATION
channel sm_registerToServerLocation
channel sm_findInServerLocation
channel sm_relationship

-- DATATYPES
datatype SM_CONSTRAINTS = accessData | countAccess 
datatype SM_RESPONSE_TYPES = RelationInfo | RelationNotFound | constraintNotFound | InvalidAction

-- CONSTANTS
PROVIDER_RELATIONSHIPS = { 0..9 }
PROVIDER_CONSTRAINTS = SM_CONSTRAINTS
SM_RELATIONSHIP = { 0,1 }
SM_OPERATION = { 0,1 }

-- INIT
Init = SM1 [|{ sm_registerToServerLocation, sm_findInServerLocation }|] SM2
SM1 = (SocialMachineMain(1, {}))
SM2 = (SocialMachineMain(2, {}))

SocialMachineMain(accessKey, smsKey) = (
	sm_registerToServerLocation -> LocationServerMain(0, accessKey, smsKey)
	[] sm_findInServerLocation -> LocationServerMain(1, accessKey, smsKey)
	[] if (empty(smsKey)) then(
			sm_response!InvalidAction -> SocialMachineMain(accessKey, smsKey)
		) else(
			sm_relationship -> relationships?idRel.idConst -> validRelationship(accessKey, smsKey, idRel, idConst)
		)
)

validRelationship(accessKey, smsKey, idRel, idConst) = (
	if ( member(idRel, PROVIDER_RELATIONSHIPS) ) then ( 
		validConstraints(accessKey, smsKey, idConst) 
	) else (
		sm_response!RelationNotFound -> SocialMachineMain(accessKey, smsKey)
	)
)

validConstraints(accessKey, smsKey, idConst) = (
	if ( member(idConst, PROVIDER_CONSTRAINTS) ) then (
		sm_response!RelationInfo -> SocialMachineMain(accessKey, smsKey)
	) else (
		sm_response!RelationNotFound -> SocialMachineMain(accessKey, smsKey)
	)
)

-- ASSERTS
assert Init :[deadlock-free]
assert Init :[deterministic]
assert Init :[divergence-free]